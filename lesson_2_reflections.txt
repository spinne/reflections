What happens when you initialize a repository? Why do you need to do it?
	To make it a folder that git is aware of an can be tracked. And so becoming a repository.
	To be able to start the process of tracking my files.
How is the staging area different from the working directory and the repository? What value do you think it offers?
	The staging area is a kind of working cache - I can choose which files to put in there and when I'm read I can commit only those.
	It gives me more control of which files I want to commit at any given time without having to commit all files every time.
How can you use the staging area to make sure you have one commit per logical change?
	By only adding one file (or only the files needed for the one change) to the staging area. When using commit now
	only the one logical change is commited. Other changes that might already be in my working directory arn't 
	commited now but can be later.
What are some situations when branches would be helpful in keeping your history organized? How would branches help?
	When just trying out new features - especially when branching from a working project - it makes it obvious that 
	all changes belong to a new feature. But if I don't want to keep the feature or it won't work I can just go back to the master.
How do the diagrams help you visualize the branch structure?
	They show the logical connections and so help understanding it.
What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
	A new commit is created that has two partent nodes (the two last nodes of the merged branches) - Diagram: To show they have two parent 
	nodes and what the history of these is.
What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?
	Probably faster than manual - you only have to look at files git tells you to. The might be bug introduced because of a merge where 
	git can't tell that this code should be looked at.